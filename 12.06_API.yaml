openapi: 3.0.1
info:
  title: SaaS Application - User Management API
  description: API specification for the Shopipy system. Unless explicitly specified all endpoints are accessible by all user roles (`Employee`, `Business Owner`, `SuperAdmin`)
  version: 1.0.0

servers:
  - url: https://api.example.com/v1
    description: placeholder

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Receipt:
      type: object
      properties:
        payment_id:
          type: integer
          format: int64
          description: Unique identifier for the payment
          example: 12345
        order_id:
          type: integer
          format: int64
          description: Associated order ID
          example: 10
        payment_method:
          type: string
          description: Payment method used for the transaction
          enum:
            - Card
            - Cash
          example: "Cash"
        tip_amount:
          type: number
          format: double
          description: Tip added to the total
          example: 15.00
        total_discount:
          type: number
          format: double
          description: Total discount applied to the order
          example: 10.00
        tax_amount:
          type: number
          format: double
          description: Total taxes applied to the order
          example: 8.00
        service_charge:
          type: number
          format: double
          description: Service charge added to the order
          example: 5.00
        total_amount:
          type: number
          format: double
          description: Final total amount after all discounts, tips, taxes, and service charges
          example: 138.00
        items:
          type: array
          items:
            type: object
            properties:
              item_id:
                type: integer
                format: int64
                example: 101
              item_type:
                type: string
                enum:
                  - Product
                  - Service
                example: "Product"
              name:
                type: string
                example: "Burger"
              quantity:
                type: integer
                example: 1
              unit_price:
                type: number
                format: double
                example: 50.00
              discount_amount:
                type: number
                format: double
                description: Discount applied to this item
                example: 5.00
              tax_amount:
                type: number
                format: double
                example: 3.00
              total_price:
                type: number
                format: double
                description: Total price for this item after discount and taxes
                example: 48.00
        created_at:
          type: string
          format: date-time
          example: "2024-10-20T14:30:00Z"
        closed_at:
          type: string
          format: date-time
          example: "2024-10-20T14:30:00Z"
      xml:
        name: receipt
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Employee:
      type: object
      properties:
        user_id:
          type: integer
          description: ID of the employee.
        business_id:
          type: integer
          description: ID of the business the employee belongs to.
        email:
          type: string
          format: email
          example: "jane.doe@example.com"
        role:
          type: string
          enum: [Employee]
          description: Role of the user in the business.
          example: "Employee"
        name:
          type: string
          description: Name of the employee.
          example: "Jane Doe"
        phone:
          type: string
          description: Phone number of the employee.
          example: "+1234567890"
        user_state:
          type: string
          enum: [Active, Inactive]
          description: Current state of the employee.
          example: "Active"
        created_at:
          type: string
          format: date-time
          description: Timestamp when the employee was created.
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the employee was last updated.

    BusinessOwner:
      type: object
      properties:
        user_id:
          type: integer
          description: ID of the business owner.
        business_id:
          type: integer
          description: ID of the business they own.
        email:
          type: string
          format: email
          example: "owner@example.com"
        role:
          type: string
          enum: [Owner]
          description: Role of the user in the business.
          example: "Owner"
        name:
          type: string
          description: Name of the business owner.
          example: "John Smith"
        phone:
          type: string
          description: Phone number of the business owner.
          example: "+9876543210"
        user_state:
          type: string
          enum: [Active, Inactive]
          description: Current state of the business owner.
          example: "Active"
        created_at:
          type: string
          format: date-time
          description: Timestamp when the business owner was created.
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the business owner was last updated.

    Tax:
      type: object
      properties:
        tax_id:
          type: integer
          description: ID of the tax
        name:
          type: string
          description: Name of the tax
        rate:
          type: number
          format: decimal
          description: Tax rate (e.g., 0.05 for 5%)
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Discount:
      type: object
      properties:
        discount_id:
          type: integer
          description: ID of the discount
        name:
          type: string
          description: Name of the discount
        description:
          type: string
          description: Detailed description of the discount
        discount_value:
          type: number
          format: decimal
          description: Discount amount or percentage
        discount_type:
          type: string
          enum: ['fixed', 'percentage']
          description: Type of the discount (fixed or percentage)
        valid_from:
          type: string
          format: date-time
          description: The start date and time when the discount is valid
        valid_to:
          type: string
          format: date-time
          description: The end date and time when the discount is valid
        is_active:
          type: boolean
          description: Whether the discount is currently active
        target_type:
          type: string
          enum: ['product', 'product_variation', 'service', 'order']
          description: The type of entity this discount applies to (e.g., product, service, or order)
        target_id:
          type: integer
          description: ID of the target entity (e.g., product, service, or product variation). If the discount applies to the entire order, this value will be `null`.
        created_at:
          type: string
          format: date-time
          description: Timestamp when the discount was created
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the discount was last updated

    Product:
      type: object
      properties:
        product_id:
          type: integer
          description: ID of the product
        category_id:
          type: integer
          description: ID of the category
        name:
          type: string
          description: Name of the product
        description:
          type: string
          description: Detailed description of the product
        base_price:
          type: number
          format: decimal
          description: Base price of the product
        product_state:
          type: string
          enum: ['available', 'unavailable']
          description: Availability state of the product
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Product_Variation:
      type: object
      properties:
        variation_id:
          type: integer
          description: ID of the variation
        product_id:
          type: integer
          description: ID of the product
        name:
          type: string
          description: Name of the variation
        price_modifier:
          type: number
          format: decimal
          description: Price modifier for the variation
        product_state:
          type: string
          enum: ['available', 'unavailable']
          description: Availability state of the variation
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Service:
      type: object
      properties:
        service_id:
          type: integer
          description: ID of the service
        category_id:
          type: integer
          description: ID of the category
        name:
          type: string
          description: Name of the service
        description:
          type: string
          description: Detailed description of the service
        base_price:
          type: number
          format: decimal
          description: Base price of the service
        duration_minutes:
          type: integer
          description: Duration of the service in minutes
        service_charge:
          type: number
          format: decimal
          description: Additional service charge
        is_active:
          type: boolean
          description: Indicates if the service is active
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Appointment:
      type: object
      properties:
        appointment_id:
          type: integer
          description: ID of the appointment
        customer_name:
          type: string
          description: Name of the customer
        customer_email:
          type: string
          description: Email of the customer
        customer_phone:
          type: string
          description: Phone number of the customer
        start_time:
          type: string
          format: date-time
          description: Start time of the appointment
        end_time:
          type: string
          format: date-time
          description: End time of the appointment
        employee_id:
          type: integer
          description: ID of the employee
        service_id:
          type: integer
          description: ID of the service

    CreateUserRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          example: "Password123!"
        name:
          type: string
          example: "John Doe"
        phone:
          type: string
          example: "+1234567890"

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        name:
          type: string
          example: "John Doe"
        phone:
          type: string
          example: "+1234567890"
        user_state:
          type: string
          enum: [Active, Inactive]
          example: "Active"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Unauthorized"

tags:
  - name: appointments
    description: CRUD for appointments
  - name: employees
    description: Accessing information about employees for services
  - name: categories
    description: Access and change product/service categories
  - name: services
    description: CRUD for services
  - name: products
    description: CRUD for products
  - name: taxes
    description: CRUD for tax rates
  - name: discounts
    description: CRUD for discounts

paths:
  # Appointments
  /{business_id}/appointments:
    post:
      summary: Create a new appointment and optionally send an SMS notification.
      description: "Create a new appointment and optionally send an SMS notification to the customer using an external SMS service."
      tags:
        - appointments
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                employee_id:
                  type: integer
                service_id:
                  type: integer
                customer_name:
                  type: string
                customer_email:
                  type: string
                customer_phone:
                  type: string
                start_time:
                  type: string
                  format: date-time
                send_sms_notification:
                  type: boolean
                  description: "If true, an SMS will be sent to the customer's phone number using AWS SNS or another service."
                  example: true
      responses:
        '201':
          description: "Appointment created successfully, SMS notification sent if requested."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Appointment created. SMS notification sent."
        '400':
          description: "Invalid input data."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "Unauthorized access."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /{business_id}/appointments/{appointment_id}:
    get:
      tags:
        - appointments
      summary: Fetch appointment details by ID
      description: Fetch the details of an appointment by its ID.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: appointment_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the appointment
      responses:
        200:
          description: Appointment details fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        400:
          description: Invalid input data
        404:
          description: Appointment not found
    
    put:
      tags:
        - appointments
      summary: Modify an existing appointment
      description: Modify the details of an existing appointment, such as time, employee, and service.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: appointment_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the appointment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                employee_id:
                  type: integer
                  description: ID of the employee
                service_id:
                  type: integer
                  description: ID of the service
                start_time:
                  type: string
                  format: date-time
                  description: The new start time of the appointment
                end_time:
                  type: string
                  format: date-time
                  description: The new end time of the appointment
                customer_name:
                  type: string
                  description: Name of the customer
                customer_email:
                  type: string
                  format: email
                  description: Email of the customer
                customer_phone:
                  type: string
                  description: Phone number of the customer
              required:
                - employee_id
                - service_id
                - start_time
                - end_time
                - customer_name
                - customer_email
                - customer_phone
      responses:
        200:
          description: Appointment updated successfully
        400:
          description: Invalid input data
        404:
          description: Appointment not found
        
    delete:
      tags:
        - appointments
      summary: Cancel an existing appointment
      description: Cancel an existing appointment by its ID.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: appointment_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the appointment
      responses:
        204:
          description: Appointment canceled successfully (No Content)
        400:
          description: Invalid input data
        404:
          description: Appointment not found
          
  # Employees for services
  /{business_id}/employees/available:
    get:
      tags:
        - employees
      summary: Get available employees for a specific time and service
      description: Get a list of all employees who are free at a specific time and can provide a particular service.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: time
          in: query
          required: true
          schema:
            type: string
            format: date-time
            example: "2024-10-15T10:00:00Z"
          description: The date and time when the service is requested
        - name: service_id
          in: query
          required: true
          schema:
            type: integer
          description: ID of the service to be provided
      responses:
        200:
          description: List of available employees
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    employee_id:
                      type: integer
                      description: ID of the employee
                    employee_name:
                      type: string
                      description: Name of the employee
                    
        400:
          description: Invalid input data
        404:
          description: No available employees found for the specified time and service
  
  /{business_id}/employees/{employee_id}/slots:
    get:
      tags:
        - employees
      summary: Get available time slots for a specific employee on a given day
      description: Retrieve a list of available time slots for a specific employee on a specific day, based on the duration of a particular service.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: employee_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the employee
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
            example: "2024-10-15"
          description: Date for which to retrieve available time slots
        - name: service_id
          in: query
          required: true
          schema:
            type: integer
          description: ID of the service (used to calculate the duration of each time slot)
      responses:
        200:
          description: List of available time slots for the employee on the specified date
          content:
            application/json:
              schema:
                type: array
                description: List of available time slots for the employee
                items:
                  type: string
                  format: date-time
                  example: "2024-10-15T14:00:00Z"
                  description: Available time slot
        400:
          description: Invalid input data
        404:
          description: Employee or service not found


  /{business_id}/employees/{employee_id}/appointments:
    get:
      tags:
        - employees
      summary: Get all appointments for a specific employee on a specific day or week
      description: Retrieve a list of all appointments for a particular employee on a specific day or the entire week if no day is specified.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: employee_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the employee
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
            example: "2024-10-15"
          description: Date for which to retrieve the appointments. If you want the appointments for a whole week, pass the start date of the week.
        - name: include_week
          in: query
          required: false
          schema:
            type: boolean
            example: true
          description: Set to `true` if you want to retrieve appointments for the entire week, starting from the provided date.
      responses:
        200:
          description: List of appointments for the employee on the specified day or week
          content:
            application/json:
              schema:
                type: array
                description: List of appointments for the employee
                items:
                  type: object
                  properties:
                    appointment_id:
                      type: integer
                      description: ID of the appointment
                    customer_name:
                      type: string
                      description: Name of the customer
                    service_id:
                      type: integer
                      description: ID of the service
                    service_name:
                      type: string
                      description: Name of the service (e.g., "Haircut", "Massage")
                    start_time:
                      type: string
                      format: date-time
                      description: Start time of the appointment
                    end_time:
                      type: string
                      format: date-time
                      description: End time of the appointment
        400:
          description: Invalid input data
        404:
          description: Employee not found or no appointments available

  # Orders
  /{business_id}/orders:
    get:
      tags:
        - orders
      summary: Get a list of orders
      description: Gets a list of all currently open orders.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business.
      responses:
        200:
          description: Orders successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    order_id:
                      type: integer
                      description: ID of the order.
                    business_id:
                      type: integer
                      description: ID of the business.
                    employee_id:
                      type: integer
                      description: ID of the employee who created the order.
                    order_status:
                      type: string
                      enum: [open, closed, canceled]
                      description: Status of the order.
                    total_discount:
                      type: number
                      format: float
                      description: Total discount applied to the order.
                    total_tip:
                      type: number
                      format: float
                      description: Total tip added to the order.
                    created_at:
                      type: string
                      format: date-time
                      description: Timestamp when the order was created.
                    closed_at:
                      type: string
                      format: date-time
                      description: Timestamp when the order was closed (if applicable).
                    order_items:
                      type: array
                      items:
                        type: object
                        properties:
                          order_item_id:
                            type: integer
                            description: ID of the order item.
                          product_id:
                            type: integer
                            description: ID of the product (if applicable).
                          service_id:
                            type: integer
                            description: ID of the service (if applicable).
                          variation_id:
                            type: integer
                            description: ID of the product variation (if applicable).
                          quantity:
                            type: integer
                            description: Quantity of the item.
                          unit_price:
                            type: number
                            format: float
                            description: Price per unit.
                          tax_rate_id:
                            type: integer
                            description: ID of the tax rate applied.
        404:
          description: Business not found.
    post:
      tags:
        - orders
      summary: Create a new order
      description: Creates a new order.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order_items:
                  type: array
                  description: List of items to be included in the order.
                  items:
                    type: object
                    properties:
                      product_id:
                        type: integer
                        description: ID of the product (if applicable).
                      service_id:
                        type: integer
                        description: ID of the service (if applicable).
                      variation_id:
                        type: integer
                        description: ID of the product variation (if applicable).
                      quantity:
                        type: integer
                        description: Quantity of the item.
                        example: 2
                      unit_price:
                        type: number
                        format: float
                        description: Price per unit.
                        example: 19.99
                      tax_rate_id:
                        type: integer
                        description: ID of the tax rate applied.
                employee_id:
                  type: integer
                  description: ID of the employee to fulfil the order
      responses:
        201:
          description: Order created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  order_id:
                    type: integer
                    description: ID of the created order.
                  order_status:
                    type: string
                    enum: [open, closed, canceled]
                    description: Status of the order.
                  total_amount:
                    type: number
                    format: float
                    description: Total amount of the order.
                  created_at:
                    type: string
                    format: date-time
                    description: Timestamp when the order was created.
        400:
          description: Invalid input data.
        404:
          description: Employee or Business not found.

  /{business_id}/orders/{order_id}:
    get:
      tags:
        - orders
      summary: Get order details
      description: Retrieve the details of a specific order.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business.
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the order.
      responses:
        200:
          description: Order details retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  order_id:
                    type: integer
                    description: ID of the order.
                  business_id:
                    type: integer
                    description: ID of the business.
                  employee_id:
                    type: integer
                    description: ID of the employee who created the order.
                  order_status:
                    type: string
                    enum: [open, closed, canceled]
                    description: Status of the order.
                  total_discount:
                    type: number
                    format: float
                    description: Total discount applied to the order.
                  total_tip:
                    type: number
                    format: float
                    description: Total tip added to the order.
                  created_at:
                    type: string
                    format: date-time
                    description: Timestamp when the order was created.
                  closed_at:
                    type: string
                    format: date-time
                    description: Timestamp when the order was closed (if applicable).
                  order_items:
                    type: array
                    items:
                      type: object
                      properties:
                        order_item_id:
                          type: integer
                          description: ID of the order item.
                        product_id:
                          type: integer
                          description: ID of the product (if applicable).
                        service_id:
                          type: integer
                          description: ID of the service (if applicable).
                        variation_id:
                          type: integer
                          description: ID of the product variation (if applicable).
                        quantity:
                          type: integer
                          description: Quantity of the item.
                        unit_price:
                          type: number
                          format: float
                          description: Price per unit.
                        tax_rate_id:
                          type: integer
                          description: ID of the tax rate applied.
        404:
          description: Order not found.
    put:
      tags:
        - orders
      summary: Modify an open order
      description: Allows an employee to modify an open order by changing its items.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business.
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the order to modify.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order_items:
                  type: array
                  description: Updated list of items for the order.
                  items:
                    type: object
                    properties:
                      order_item_id:
                        type: integer
                        description: ID of the existing order item (if modifying).
                      product_id:
                        type: integer
                        description: ID of the product (if applicable).
                      service_id:
                        type: integer
                        description: ID of the service (if applicable).
                      variation_id:
                        type: integer
                        description: ID of the product variation (if applicable).
                      quantity:
                        type: integer
                        description: Quantity of the item.
                        example: 3
                      unit_price:
                        type: number
                        format: float
                        description: Price per unit.
                        example: 29.99
                      tax_rate_id:
                        type: integer
                        description: ID of the tax rate applied.
      responses:
        200:
          description: Order modified successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  order_id:
                    type: integer
                    description: ID of the modified order.
                  order_status:
                    type: string
                    enum: [open, closed, canceled]
                    description: Status of the order.
                  total_amount:
                    type: number
                    format: float
                    description: Total amount of the order.
                  updated_at:
                    type: string
                    format: date-time
                    description: Timestamp when the order was last updated.
        400:
          description: Invalid input data or order cannot be modified (already closed or canceled).
        404:
          description: Order not found.
  /{business_id}/orders/{order_id}/cancel:
    post:
      tags:
        - orders
      summary: Cancel an open order
      description: Allows an employee to cancel an open (unpaid/not closed) order.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business.
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the order to cancel.
      responses:
        200:
          description: Order canceled successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  order_id:
                    type: integer
                    description: ID of the canceled order.
                  order_status:
                    type: string
                    enum: [open, closed, canceled]
                    description: Status of the order (should be 'canceled').
                  updated_at:
                    type: string
                    format: date-time
                    description: Timestamp when the order was canceled.
        400:
          description: Order cannot be canceled (already closed or canceled).
        404:
          description: Order not found.
  /{business_id}/orders/{order_id}/apply_discount:
    post:
      tags:
        - orders
      summary: Apply a discount to an order
      description: Allows an employee to apply a discount to an open order. The discount can be applied to the entire order or to specific order items.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business.
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the order to apply the discount to.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                discount_id:
                  type: integer
                  description: ID of the discount to apply.
                apply_to:
                  type: string
                  enum: [order, items]
                  description: Indicates whether the discount is applied to the entire order or specific items.
                order_item_ids:
                  type: array
                  items:
                    type: integer
                  description: List of order item IDs to which the discount should be applied (required if apply_to is 'items').
              required:
                - discount_id
                - apply_to
      responses:
        200:
          description: Discount applied successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  order_id:
                    type: integer
                    description: ID of the order.
                  total_discount:
                    type: number
                    format: float
                    description: Total discount applied to the order.
                  updated_at:
                    type: string
                    format: date-time
                    description: Timestamp when the order was updated.
        400:
          description: Invalid input data or order cannot be modified (already closed or canceled).
        404:
          description: Order or discount not found.
          
  /{business_id}/orders/{order_id}/pay:
    post:
      tags:
        - orders
      summary: Process payment for an order with optional tip
      description: Processes the payment for an order, allowing the customer to add a tip. Creates a payment record and closes the order.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business.
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the order to process payment for.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payment_method:
                  type: string
                  enum: [cash, credit_card, debit_card, gift_card]
                  description: Payment method used.
                amount_paid:
                  type: number
                  format: float
                  description: Total amount paid by the customer (including tip).
                tip_amount:
                  type: number
                  format: float
                  description: Tip amount added by the customer.
                  example: 5.00
              required:
                - payment_method
                - amount_paid
      responses:
        200:
          description: Payment processed successfully, order closed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  order_id:
                    type: integer
                    description: ID of the order.
                  order_status:
                    type: string
                    enum: [open, closed, canceled]
                    description: Status of the order (should be 'closed').
                  total_tip:
                    type: number
                    format: float
                    description: Total tip added to the order.
                  closed_at:
                    type: string
                    format: date-time
                    description: Timestamp when the order was closed.
                  payment_id:
                    type: integer
                    description: ID of the payment record.
                  payment_method:
                    type: string
                    enum: [cash, credit_card, debit_card, mobile_payment]
                    description: Payment method used.
                  amount_paid:
                    type: number
                    format: float
                    description: Amount paid by the customer.
                  created_at:
                    type: string
                    format: date-time
                    description: Timestamp when the payment was made.
        400:
          description: Invalid input data or order cannot be paid (already closed or canceled).
        404:
          description: Order not found.
          
  /{business_id}/orders/{order_id}/split:
    post:
      summary: Split an order into multiple payments.
      description: "Allows splitting an open order into multiple payments. Each payment can be completed with different payment methods (cash, card, gift card, etc.)."
      tags:
        - orders
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business.
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the order.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payments:
                  type: array
                  description: "List of payments to split the order."
                  items:
                    type: object
                    properties:
                      amount:
                        type: number
                        format: float
                        description: "The amount for this payment."
                      payment_method:
                        type: string
                        description: "Method used for payment (e.g., cash, card, gift card)."
      responses:
        '200':
          description: "Order split into multiple payments successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order split successfully."
        '400':
          description: "Invalid input or order cannot be split."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "Order not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "Unauthorized access."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          
  /{business_id}/orders/{order_id}/receipt:
    get:
      tags:
        - orders
      summary: Get the receipt for an order
      description: Retrieve the receipt for a closed order, including all costs, taxes, discounts, and service charges calculated and presented.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business.
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the order.
      responses:
        '200':
          description: Receipt retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Receipt'
        '400':
          description: Invalid input data.
        '404':
          description: Order not found.
        '409':
          description: Order is not closed yet.
  /{business_id}/orders/{order_id}/refund:
    post:
      tags:
        - orders
      summary: Refund a closed order
      description: Allows a business to refund a closed order and mark it as refunded.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business.
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the order to refund.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refund_reason:
                  type: string
                  description: Reason for the refund.
      responses:
        200:
          description: Order refunded successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  order_id:
                    type: integer
                  order_status:
                    type: string
                    enum: [open, closed, canceled, refunded]
                  refunded_at:
                    type: string
                    format: date-time
        400:
          description: Invalid input data or order cannot be refunded (e.g., already refunded).
        404:
          description: Order not found.

  # Category CRUD + access by category
  /{business_id}/categories:
    post:
      tags:
        - categories
      summary: Create a new category
      description: Add a new category for the business. Accessible by `Business Owner` and `SuperAdmin`.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the category
      responses:
        201:
          description: Category created successfully
        400:
          description: Invalid input data
          
    get:
      tags:
        - categories
      summary: List all categories for a business
      description: Retrieve a list of all categories for a business.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
      responses:
        200:
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                description: List of categories
                items:
                  type: object
                  properties:
                    category_id:
                      type: integer
                      description: ID of the category
                    name:
                      type: string
                      description: Name of the category
        400:
          description: Invalid input
        404:
          description: No categories found
          
  /{business_id}/categories/{category_id}:
    get:
      tags:
        - categories
      summary: Get a specific category by ID
      description: Retrieve details of a specific category by its ID.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: category_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the category
      responses:
        200:
          description: Category details retrieved successfully
        400:
          description: Invalid input
        404:
          description: Category not found
      
    put:
      tags:
        - categories
      summary: Update an existing category
      description: Modify the name or details of a category. Accessible by `Business Owner` and `SuperAdmin`.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: category_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New name of the category
      responses:
        200:
          description: Category updated successfully
        400:
          description: Invalid input data
        404:
          description: Category not found

    delete:
      tags:
        - categories
      summary: Delete a category
      description: Remove a category by its ID. Accessible by `Business Owner` and `SuperAdmin`.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: category_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the category
      responses:
        204:
          description: Category deleted successfully
        400:
          description: Invalid input data
        404:
          description: Category not found
  
  /{business_id}/categories/{category_id}/services:
    get:
      tags:
        - categories
      summary: List all services for a category
      description: Retrieve a list of all services offered by the business in a specific category.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: category_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the category
      responses:
        200:
          description: List of services for the category
          content:
            application/json:
              schema:
                type: array
                description: List of services
                items:
                  type: object
                  properties:
                    service_id:
                      type: integer
                      description: ID of the service
                    name:
                      type: string
                      description: Name of the service
                    description:
                      type: string
                      description: Description of the service
                    base_price:
                      type: number
                      format: integer
                    service_charge:
                      type: number
                      format: integer
                      description: Service charge
                    duration_minutes:
                      type: integer
                      description: Duration of the service in minutes
                    is_active:
                      type: boolean
                      description: Whether the service is currently active or available
        400:
          description: Invalid input
        404:
          description: No services found for the category

  /{business_id}/categories/{category_id}/products:
    get:
      tags:
        - categories
      summary: List all products for a category
      description: Retrieve a list of all products offered by the business in a specific category.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: category_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the category
      responses:
        200:
          description: List of products for the category
          content:
            application/json:
              schema:
                type: array
                description: List of products
                items:
                  type: object
                  properties:
                    product_id:
                      type: integer
                      description: ID of the product
                    name:
                      type: string
                      description: Name of the product
                    description:
                      type: string
                      description: Detailed description of the product
                    base_price:
                      type: number
                      format: decimal
                      description: Base price of the product
                    product_state:
                      type: string
                      enum: ['available', 'unavailable']
                      description: Availability state of the product
                    created_at:
                      type: string
                      format: date-time
                    updated_at:
                      type: string
                      format: date-time
        400:
          description: Invalid input data
        404:
          description: No products found for the specified category


  # CRUD for services
  /{business_id}/services:
    post:
      tags:
        - services
      summary: Create a new service
      description: Add a new service for the business. Accessible by `Business Owner` and `SuperAdmin`.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category_id:
                  type: integer
                  description: ID of the category the service belongs to
                name:
                  type: string
                  description: Name of the service
                description:
                  type: string
                  description: Detailed description of the service
                base_price:
                  type: number
                  format: decimal
                  description: Base price of the service
                duration_minutes:
                  type: integer
                  description: Duration of the service in minutes
                service_charge:
                  type: number
                  format: decimal
                  description: Additional service charge
                is_active:
                  type: boolean
                  description: Indicates whether the service is currently active
      responses:
        201:
          description: Service created successfully
        400:
          description: Invalid input data

  /{business_id}/services/{service_id}:
    get:
      tags:
        - services
      summary: Get a specific service by ID
      description: Retrieve details of a specific service by its ID.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: service_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the service
      responses:
        200:
          description: Service details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        400:
          description: Invalid input
        404:
          description: Service not found

    put:
      tags:
        - services
      summary: Update an existing service
      description: Modify the details of an existing service. Accessible by `Business Owner` and `SuperAdmin`.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: service_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category_id:
                  type: integer
                  description: ID of the category the service belongs to
                name:
                  type: string
                  description: Name of the service
                description:
                  type: string
                  description: Detailed description of the service
                base_price:
                  type: number
                  format: decimal
                  description: Base price of the service
                duration_minutes:
                  type: integer
                  description: Duration of the service in minutes
                service_charge:
                  type: number
                  format: decimal
                  description: Additional service charge
                is_active:
                  type: boolean
                  description: Indicates whether the service is currently active
      responses:
        200:
          description: Service updated successfully
        400:
          description: Invalid input data
        404:
          description: Service not found
          
    delete:
      tags:
        - services
      summary: Delete a service
      description: Remove a service by its ID. Accessible by `Business Owner` and `SuperAdmin`.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: service_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the service
      responses:
        204:
          description: Service deleted successfully (No Content)
        400:
          description: Invalid input data
        404:
          description: Service not found


  # CRUD for product and product_variation
  
  /{business_id}/products:
    post:
      tags:
        - products
      summary: Create a new product
      description: Add a new product for the business. Accessible by `Business Owner` and `SuperAdmin`.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category_id:
                  type: integer
                  description: ID of the category the product belongs to
                name:
                  type: string
                  description: Name of the product
                description:
                  type: string
                  description: Detailed description of the product
                base_price:
                  type: number
                  format: decimal
                  description: Base price of the product
                product_state:
                  type: string
                  enum: ['available', 'unavailable']
                  description: Availability state of the product
      responses:
        201:
          description: Product created successfully
        400:
          description: Invalid input data
          
  /{business_id}/products/{product_id}:
    get:
      tags:
        - products
      summary: Get a specific product by ID
      description: Retrieve details of a specific product by its ID.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the product
      responses:
        200:
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Product'
        400:
          description: Invalid input
        404:
          description: Product not found
          
          
    put:
      tags:
        - products
      summary: Update an existing product
      description: Modify the details of an existing product. Accessible by `Business Owner` and `SuperAdmin`.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category_id:
                  type: integer
                  description: ID of the category the product belongs to
                name:
                  type: string
                  description: Name of the product
                description:
                  type: string
                  description: Detailed description of the product
                base_price:
                  type: number
                  format: decimal
                  description: Base price of the product
                product_state:
                  type: string
                  enum: ['available', 'unavailable']
                  description: Availability state of the product
      responses:
        200:
          description: Product updated successfully
        400:
          description: Invalid input data
        404:
          description: Product not found

    delete:
      tags:
        - products
      summary: Delete a product
      description: Remove a product by its ID. Accessible by `Business Owner` and `SuperAdmin`.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the product
      responses:
        204:
          description: Product deleted successfully (No Content)
        400:
          description: Invalid input data
        404:
          description: Product not found


  /{business_id}/products/{product_id}/variations:
    post:
      tags:
        - products
      summary: Create a new product variation
      description: Add a new variation to a product. Accessible by `Business Owner` and `SuperAdmin`.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the variation
                price_modifier:
                  type: number
                  format: decimal
                  description: Price modifier for the variation
                product_state:
                  type: string
                  enum: ['available', 'unavailable']
                  description: Availability state of the product variation
      responses:
        201:
          description: Product variation created successfully
        400:
          description: Invalid input data
          
  /{business_id}/products/{product_id}/variations/{variation_id}:
    get:
      tags:
        - products
      summary: Get a specific product variation by ID
      description: Retrieve details of a specific product variation by its ID.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the product
        - name: variation_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the product variation
      responses:
        200:
          description: Product variation details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product_Variation'
        400:
          description: Invalid input
        404:
          description: Product variation not found


    put:
      tags:
        - products
      summary: Update an existing product variation
      description: Modify the details of an existing product variation. Accessible by `Business Owner` and `SuperAdmin`.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the product
        - name: variation_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the variation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the variation
                price_modifier:
                  type: number
                  format: decimal
                  description: Price modifier for the variation
                product_state:
                  type: string
                  enum: ['available', 'unavailable']
                  description: Availability state of the variation
      responses:
        200:
          description: Product variation updated successfully
        400:
          description: Invalid input data
        404:
          description: Product variation not found
          
          
    delete:
      tags:
        - products
      summary: Delete a product variation
      description: Remove a product variation by its ID. Accessible by `Business Owner` and `SuperAdmin`.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the product
        - name: variation_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the product variation
      responses:
        204:
          description: Product variation deleted successfully (No Content)
        400:
          description: Invalid input data
        404:
          description: Product variation not found

  /{business_id}/employees:
    get:
      summary: Get a list of all employees in a business.
      description: "Retrieve a list of all employees for a given business. Accessible by `Business Owner` and `SuperAdmin`."
      tags:
        - Employee Management
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business.
      responses:
        '200':
          description: List of employees retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No employees found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new employee for a business.
      description: "Create a new employee under a specified business. Accessible by `Business Owner` and `SuperAdmin`."
      tags:
        - Employee Management
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Employee created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /{business_id}/employees/{employee_id}:
    get:
      summary: Get employee details by ID.
      description: "Retrieve detailed information of an employee by ID. Accessible by `Business Owner` and `SuperAdmin`."
      tags:
        - Employee Management
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business.
        - name: employee_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the employee.
      responses:
        '200':
          description: Employee details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Employee not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update employee details.
      description: "Update details of an employee by ID. Accessible by `Business Owner` and `SuperAdmin`."
      tags:
        - Employee Management
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business.
        - name: employee_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the employee.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Employee updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Employee not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete an employee.
      description: "Delete an employee from a business. Accessible by `Business Owner` and `SuperAdmin`."
      tags:
        - Employee Management
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business.
        - name: employee_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the employee to be deleted.
      responses:
        '204':
          description: Employee deleted successfully.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Employee not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /business_owners:
    get:
      summary: Get a list of all business owners.
      description: "Retrieve a list of all business owners. Accessible only by `SuperAdmin`."
      tags:
        - Business Owner Management
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
      responses:
        '200':
          description: List of business owners retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BusinessOwner'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No business owners found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new business owner.
      description: "Create a new business owner. Accessible only by `SuperAdmin`."
      tags:
        - Business Owner Management
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Business owner created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessOwner'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /business_owners/{owner_id}:
    get:
      summary: Get business owner details by ID.
      description: "Retrieve detailed information of a business owner by ID. Accessible only by `SuperAdmin`."
      tags:
        - Business Owner Management
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: owner_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business owner.
      responses:
        '200':
          description: Business owner details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessOwner'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Business owner not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update business owner details.
      description: "Update details of a business owner by ID. Accessible only by `SuperAdmin`."
      tags:
        - Business Owner Management
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: owner_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business owner.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Business owner updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessOwner'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Business owner not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a business owner.
      description: "Delete a business owner. Accessible only by `SuperAdmin`."
      tags:
        - Business Owner Management
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: owner_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business owner to be deleted.
      responses:
        '204':
          description: Business owner deleted successfully.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Business owner not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  
  /{business_id}/taxes:
    post:
      tags:
        - taxes
      summary: Create a new tax
      description: Add a new tax entry to the system for a specific business. Accessible by `Business Owner` and `SuperAdmin`.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the tax (e.g., VAT, Sales Tax)
                rate:
                  type: number
                  format: decimal
                  description: Tax rate (e.g., 0.05 for 5%)
      responses:
        201:
          description: Tax created successfully
        400:
          description: Invalid input data

  /{business_id}/taxes/{tax_id}:
    get:
      tags:
        - taxes
      summary: Get a specific tax by ID
      description: Retrieve details of a specific tax entry by its ID for a specific business.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: tax_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the tax entry
      responses:
        200:
          description: Tax details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tax'
        400:
          description: Invalid input
        404:
          description: Tax not found

    put:
      tags:
        - taxes
      summary: Update an existing tax
      description: Modify the details of an existing tax entry for a business. Accessible by `Business Owner` and `SuperAdmin`.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: tax_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the tax entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New name for the tax
                rate:
                  type: number
                  format: decimal
                  description: New tax rate (e.g., 0.05 for 5%)
      responses:
        200:
          description: Tax updated successfully
        400:
          description: Invalid input data
        404:
          description: Tax not found
          
    delete:
      tags:
        - taxes
      summary: Delete a tax entry
      description: Remove a tax entry by its ID for a specific business. Accessible by `Business Owner` and `SuperAdmin`.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: tax_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the tax entry
      responses:
        204:
          description: Tax deleted successfully (No Content)
        400:
          description: Invalid input data
        404:
          description: Tax not found
          
          
  /{business_id}/discounts:
    post:
      tags:
        - discounts
      summary: Create a new discount
      description: Add a new discount to the system for a specific business.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the discount (e.g., "Holiday Sale")
                description:
                  type: string
                  description: A detailed description of the discount
                discount_value:
                  type: number
                  format: decimal
                  description: Value of the discount (e.g., 10 for a flat discount or 0.10 for 10%)
                discount_type:
                  type: string
                  enum: ['fixed', 'percentage']
                  description: Type of discount (fixed amount or percentage)
                valid_from:
                  type: string
                  format: date-time
                  description: The start date and time when the discount becomes active
                valid_to:
                  type: string
                  format: date-time
                  description: The end date and time when the discount is no longer valid
                is_active:
                  type: boolean
                  description: Specifies whether the discount is currently active
                target_type:
                  type: string
                  enum: ['product', 'product_variation', 'service', 'order']
                  description: Type of entity the discount applies to (e.g., product, service, or order)
                target_id:
                  type: integer
                  description: ID of the product, service, or product variation this discount applies to. If target_type is 'order', set this to null.
      responses:
        201:
          description: Discount created successfully
        400:
          description: Invalid input data

  /{business_id}/discounts/{discount_id}:
    get:
      tags:
        - discounts
      summary: Get a specific discount by ID
      description: Retrieve details of a specific discount entry by its ID for a specific business.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: discount_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the discount
      responses:
        200:
          description: Discount details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discount'
        400:
          description: Invalid input
        404:
          description: Discount not found

          
    put:
      tags:
        - discounts
      summary: Update an existing discount
      description: Modify the details of an existing discount entry for a business.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: discount_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the discount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the discount
                description:
                  type: string
                  description: A detailed description of the discount
                discount_value:
                  type: number
                  format: decimal
                  description: Value of the discount (e.g., 10 or 0.10)
                discount_type:
                  type: string
                  enum: ['fixed', 'percentage']
                  description: Type of discount (fixed amount or percentage)
                valid_from:
                  type: string
                  format: date-time
                  description: The start date and time when the discount becomes active
                valid_to:
                  type: string
                  format: date-time
                  description: The end date and time when the discount is no longer valid
                is_active:
                  type: boolean
                  description: Specifies whether the discount is currently active
                target_type:
                  type: string
                  enum: ['product', 'product_variation', 'service', 'order']
                  description: Type of entity the discount applies to (e.g., product, service, or order)
                target_id:
                  type: integer
                  description: ID of the product, service, or product variation this discount applies to. If `target_type` is 'order', this value is `null`.
      responses:
        200:
          description: Discount updated successfully
        400:
          description: Invalid input data
        404:
          description: Discount not found
          
    delete:
      tags:
        - discounts
      summary: Delete a discount entry
      description: Remove a discount entry by its ID for a specific business.
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business
        - name: discount_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the discount
      responses:
        204:
          description: Discount deleted successfully (No Content)
        400:
          description: Invalid input data
        404:
          description: Discount not found
                
  /merchants:
    post:
      summary: Create a new merchant/business.
      description: "Create a new merchant/business and assign an owner user to it."
      tags:
        - Merchant Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                owner_user_id:
                  type: integer
                  description: "ID of the user who will own this business."
                business_name:
                  type: string
                  description: "Name of the business."
                business_address:
                  type: string
                  description: "Address of the business."
                business_phone:
                  type: string
                  description: "Contact phone number of the business."
                business_email:
                  type: string
                  format: email
                  description: "Contact email of the business."
      responses:
        '201':
          description: "Merchant created successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Merchant created successfully."
        '400':
          description: "Invalid input data."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "Unauthorized access."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /merchants/{business_id}:
    get:
      summary: Get business details.
      description: "Get details of a specific merchant/business by its ID."
      tags:
        - Merchant Management
      parameters:
        - name: API-Version
          in: header
          required: true
          schema:
            type: string
            example: "1.0"
          description: Version of the API to use.
        - name: business_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the business.
      responses:
        '200':
          description: "Business details fetched successfully."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessOwner'
        '404':
          description: "Business not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "Unauthorized access."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
